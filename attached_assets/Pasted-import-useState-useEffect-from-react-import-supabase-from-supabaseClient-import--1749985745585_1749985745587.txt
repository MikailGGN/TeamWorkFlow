import { useState, useEffect } from 'react';
import { supabase } from '../supabaseClient';
import { useNavigate } from 'react-router-dom';
import {
  Box, Button, Dialog, DialogActions, DialogContent, DialogTitle,
  Grid, TextField, Paper, AppBar, Toolbar, Typography,
  Snackbar, Alert, Container, List, ListItem, 
  IconButton, Select, MenuItem, FormControl, InputLabel, LinearProgress
} from '@mui/material';
import { Logout, ArrowLeft, ArrowRight } from '@mui/icons-material';
import logo from '../assets/TP_.png';
import InvisibleMenu from '../components/InvisibleMenu';

const ACTIVITY_TYPES = [
  { value: 'Mega Activation', label: 'Mega Activation', color: '#ffb6c1' },
  { value: 'Mini Activation', label: 'Mini Activation', color: '#87cefa' },
  { value: 'New Site Activation', label: 'New Site Activation', color: '#90ee90' },
  { value: 'New Site Launch', label: 'New Site Launch', color: '#ffa500' },
  { value: 'Service Camp', label: 'Service Camp', color: '#da70d6' }
];

const ActivityPlanner = () => {
  const navigate = useNavigate();
  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
  const [plans, setPlans] = useState<any[]>([]);
  const [openModal, setOpenModal] = useState(false);
  const [formData, setFormData] = useState({ 
    location: '', 
    activity: '', 
    notes: '',
    date: '' 
  });
  const [userEmail, setUserEmail] = useState<string|null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchUserSession = async () => {
      const { data: { session }, error } = await supabase.auth.getSession();
      if (error) setError("Error retrieving session");
      setUserEmail(session?.user?.email || null);
    };
    fetchUserSession();
  }, []);

  useEffect(() => {
    if (userEmail) loadPlansForMonth();
  }, [currentMonth, currentYear, userEmail]);

  const loadPlansForMonth = async () => {
    try {
      setLoading(true);
      const startDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-01`;
      const endDate = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${new Date(currentYear, currentMonth + 1, 0).getDate()}`;
      
      const { data, error } = await supabase
        .from('activity_planner')
        .select('*')
        .gte('date', startDate)
        .lte('date', endDate)
        .eq('useremail', userEmail);

      if (error) throw error;
      setPlans(data || []);
    } catch (error: any) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleMonthChange = (direction: 'prev' | 'next') => {
    if (direction === 'prev') {
      if (currentMonth === 0) {
        setCurrentMonth(11);
        setCurrentYear(currentYear - 1);
      } else {
        setCurrentMonth(currentMonth - 1);
      }
    } else {
      if (currentMonth === 11) {
        setCurrentMonth(0);
        setCurrentYear(currentYear + 1);
      } else {
        setCurrentMonth(currentMonth + 1);
      }
    }
  };

  const getActivityColor = (activityType: string) => {
    return ACTIVITY_TYPES.find(a => a.value === activityType)?.color || 'white';
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    localStorage.removeItem("userEmail");
    navigate("/");
  };

  const handleDateClick = (day: number) => {
    const date = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    const plan = plans.find(p => p.date === date);
    setFormData({ 
      location: plan?.location || '', 
      activity: plan?.activity || '', 
      notes: plan?.notes || '',
      date 
    });
    setOpenModal(true);
  };

  const handleSavePlan = async () => {
    if (!userEmail || !formData.date) return;
    
    try {
      setLoading(true);
      
      // Check if a plan already exists for this date and user
      const { data: existingPlan, error: fetchError } = await supabase
        .from('activity_planner')
        .select('*')
        .eq('date', formData.date)
        .eq('useremail', userEmail)
        .maybeSingle();

      if (fetchError) throw fetchError;

      let error;
      if (existingPlan) {
        // Update existing plan
        const { error: updateError } = await supabase
          .from('activity_planner')
          .update({
            location: formData.location,
            activity: formData.activity,
            notes: formData.notes,
            updated_at: new Date().toISOString()
          })
          .eq('id', existingPlan.id);

        error = updateError;
      } else {
        // Insert new plan
        const { error: insertError } = await supabase
          .from('activity_planner')
          .insert({
            date: formData.date,
            location: formData.location,
            activity: formData.activity,
            notes: formData.notes,
            useremail: userEmail,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });

        error = insertError;
      }

      if (error) throw error;
      
      await loadPlansForMonth();
      setOpenModal(false);
    } catch (error: any) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const renderCalendarDays = () => {
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    const firstDay = new Date(currentYear, currentMonth, 1).getDay();
    const days = [];

    // Empty cells for days before the first day of the month
    for (let i = 0; i < firstDay; i++) {
      days.push(<Grid item xs={12/7} key={`empty-${i}`} sx={{ minHeight: '80px' }} />);
    }

    // Cells for each day of the month
    for (let day = 1; day <= daysInMonth; day++) {
      const date = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      const plan = plans.find(p => p.date === date);
      const isToday = date === new Date().toISOString().split('T')[0];

      days.push(
        <Grid item xs={12/7} key={`day-${day}`}>
          <Paper
            elevation={isToday ? 3 : 1}
            sx={{ 
              height: '80px',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              justifyContent: 'center',
              backgroundColor: getActivityColor(plan?.activity),
              border: isToday ? '2px solid #1976d2' : '1px solid #ddd',
              cursor: 'pointer',
              '&:hover': {
                backgroundColor: `${getActivityColor(plan?.activity)}99` || 'action.hover'
              }
            }}
            onClick={() => handleDateClick(day)}
          >
            <Typography variant="body2" fontWeight={isToday ? "bold" : "normal"}>
              {day}
            </Typography>
            {plan?.activity && (
              <Typography variant="caption" display="block" noWrap sx={{ maxWidth: '100%', px: 0.5 }}>
                {plan.location}
              </Typography>
            )}
          </Paper>
        </Grid>
      );
    }

    return days;
  };

  return (
    <>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            <img src={logo} alt="taskpulse" style={{ height: 40, marginRight: 16 }} />
          </Typography>
          {userEmail && <Typography variant="body1" sx={{ mr: 2 }}>Signed in as: {userEmail}</Typography>}
          <Button color="inherit" startIcon={<Logout />} onClick={handleLogout}>Logout</Button>
        </Toolbar>
      </AppBar>
      <InvisibleMenu />
      <Container sx={{ display: 'flex', mt: 4, flexDirection: { xs: 'column', md: 'row' }, gap: 3 }}>
        {/* Calendar Section - Now properly sized for 7 columns */}
        <Paper elevation={3} sx={{ p: 3, flex: 2 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
            <IconButton onClick={() => handleMonthChange('prev')}>
              <ArrowLeft />
            </IconButton>
            <Typography variant="h6" gutterBottom>
              {new Date(currentYear, currentMonth).toLocaleString('default', { month: 'long', year: 'numeric' })}
            </Typography>
            <IconButton onClick={() => handleMonthChange('next')}>
              <ArrowRight />
            </IconButton>
          </Box>
          
          {loading && <LinearProgress sx={{ mb: 2 }} />}
          
          {/* Day headers - 7 equal columns */}
          <Grid container spacing={1} sx={{ mb: 1 }}>
            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
              <Grid item xs={12/7} key={day}>
                <Typography align="center" fontWeight="bold" variant="body2">
                  {day}
                </Typography>
              </Grid>
            ))}
          </Grid>
          
          {/* Calendar days - 7 equal columns */}
          <Grid container spacing={1}>
            {renderCalendarDays()}
          </Grid>
        </Paper>

        {/* Activities List Section */}
        <Paper elevation={3} sx={{ p: 3, flex: 1, minWidth: { md: '300px' } }}>
          <Typography variant="h6" gutterBottom>Activities</Typography>
          <List>
            {plans.map((plan, index) => (
              <ListItem key={index} sx={{ 
                backgroundColor: getActivityColor(plan.activity), 
                mb: 1, 
                borderRadius: 1,
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'flex-start'
              }}>
                <Typography variant="subtitle2">
                  {new Date(plan.date).toLocaleDateString()}
                </Typography>
                <Typography fontWeight="bold">{plan.activity}</Typography>
                <Typography variant="body2">{plan.location}</Typography>
                {plan.notes && (
                  <Typography variant="caption" color="text.secondary">
                    {plan.notes}
                  </Typography>
                )}
              </ListItem>
            ))}
          </List>
        </Paper>
      </Container>

      <Dialog open={openModal} onClose={() => setOpenModal(false)} fullWidth maxWidth="sm">
        <DialogTitle>
          {formData.date ? new Date(formData.date).toLocaleDateString() : 'New Activity'}
        </DialogTitle>
        <DialogContent>
          <FormControl fullWidth margin="normal">
            <InputLabel>Activity Type</InputLabel>
            <Select
              value={formData.activity}
              label="Activity Type"
              onChange={(e) => setFormData({...formData, activity: e.target.value})}
            >
              {ACTIVITY_TYPES.map((type) => (
                <MenuItem key={type.value} value={type.value}>{type.label}</MenuItem>
              ))}
            </Select>
          </FormControl>
          <TextField 
            label="Location" 
            fullWidth 
            margin="normal" 
            value={formData.location} 
            onChange={e => setFormData({ ...formData, location: e.target.value })} 
          />
          <TextField 
            label="Notes" 
            fullWidth 
            margin="normal" 
            multiline 
            rows={3} 
            value={formData.notes} 
            onChange={e => setFormData({ ...formData, notes: e.target.value })} 
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenModal(false)}>Cancel</Button>
          <Button 
            variant="contained" 
            color="primary" 
            onClick={handleSavePlan}
            disabled={loading || !formData.activity || !formData.location}
          >
            {loading ? 'Saving...' : 'Save'}
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError(null)} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>
        <Alert onClose={() => setError(null)} severity="error" sx={{ width: '100%' }}>{error}</Alert>
      </Snackbar>
    </>
  );
};

export default ActivityPlanner;